<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance on Greenfield</title>
    <link>https://greenfield.app/tags/performance/</link>
    <description>Recent content in performance on Greenfield</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Oct 2019 15:49:15 +0200</lastBuildDate>
    
	<atom:link href="https://greenfield.app/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The life and performance of an application frame.</title>
      <link>https://greenfield.app/blog/life-of-an-application-frame/</link>
      <pubDate>Mon, 21 Oct 2019 15:49:15 +0200</pubDate>
      
      <guid>https://greenfield.app/blog/life-of-an-application-frame/</guid>
      <description>To understand the life and performance of an application frame inside Greenfield, it&amp;rsquo;s important to understand the difference between a plain video streaming solution, and the design used by Greenfield.
A Simple Video Streaming Solution If we are to define the maximum FPS as: &amp;ldquo;maximum number of frames an application can send to the compositor without the display pipeline clogging&amp;rdquo;, The pipeline basically looks like this: server side
client application renders frame</description>
    </item>
    
  </channel>
</rss>